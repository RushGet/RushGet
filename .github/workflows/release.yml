name: Build and Release Rust Binary
on:
  push:
    branches:
      - release
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          [
            "x86_64-unknown-linux-musl",
            "aarch64-unknown-linux-musl",
            "x86_64-apple-darwin",
            "x86_64-pc-windows-gnu",
          ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      # - name: Compile and release
      #   uses: rust-build/rust-build.action@v1.4.2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     SRC_DIR: src
      #     TOOLCHAIN_VERSION : nightly
      #     RUSTTARGET: ${{ matrix.target }}
      #     ARCHIVE_TYPES: ${{ matrix.archive }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true
      # - uses: ClementTsang/cargo-action@v0.0.3
      #   with:
      #     command: build
      #     args: --release --target ${{ matrix.target }}
      #     use-cross: true
      #     directory: src
      # - name: Build Release Binary
      #   run: |
      #     cd src
      #     cargo build --release --target ${{ matrix.target }}
      - name: Build-musl ${{ matrix.target }}
        uses: shogan/rust-musl-action@master
        with:
          args: cargo build --target ${{ matrix.target }} --release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true
      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/my-binary
          asset_name: my-binary-${{ matrix.target }}-${{ github.ref }}
          asset_content_type: application/octet-stream
